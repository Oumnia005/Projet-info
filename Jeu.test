#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <time.h>
#include <windows.h>

#define TAILLE 9
#define MAX_BARRIERES 10

typedef struct {
    int x, y;
    char symbole;
    char nom[20];
    clock_t temps_debut;
    clock_t temps_total;
    int nb_barrieres_restantes;
} Joueur;

typedef struct {
    int x1, y1;  // Coordonnées du début de la barrière
    int x2, y2;  // Coordonnées de la fin de la barrière
    char type;   // 'h' pour horizontal, 'v' pour vertical
} Barriere;

void menu();
void jouer_partie(int nb_joueurs);
void afficher_regles();
bool deplacer_joueur(Joueur *joueur, char direction);
bool verifier_victoire(Joueur joueur);
void afficher_plateau();
void initialiser_plateau(int nb_joueurs);
void initialiser_joueurs(int nb_joueurs);
bool poser_barriere(Joueur *joueur);
bool deplacer_joueur_IA(Joueur *joueur);
void changer_couleur(int couleur);
void demarrer_chronometre(Joueur *joueur);
void arreter_chronometre(Joueur *joueur);
void afficher_temps(Joueur joueur);

char plateau[TAILLE][TAILLE];
Joueur joueurs[4];
Barriere barrières[MAX_BARRIERES];
int nb_joueurs;
int nb_barrieres = 0;

void changer_couleur(int couleur) {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), couleur);
}

void demarrer_chronometre(Joueur *joueur) {
    joueur->temps_debut = clock();
}

void arreter_chronometre(Joueur *joueur) {
    joueur->temps_total += clock() - joueur->temps_debut;
}

void afficher_temps(Joueur joueur) {
    double temps = (double)joueur.temps_total / CLOCKS_PER_SEC;
    printf("Temps écoulé pour %s (%c) : %.2f secondes\n", joueur.nom, joueur.symbole, temps);
}

bool case_valide(int x, int y) {
    return x >= 0 && x < TAILLE && y >= 0 && y < TAILLE;
}

void initialiser_joueurs(int nb_joueurs) {
    for (int i = 0; i < nb_joueurs; i++) {
        printf("Joueur %d, entrez votre nom : ", i + 1);
        scanf("%s", joueurs[i].nom);

        do {
            printf("Joueur %s, choisissez un symbole unique pour votre pion : ", joueurs[i].nom);
            scanf(" %c", &joueurs[i].symbole);
        } while ((i > 0 && joueurs[i].symbole == joueurs[i - 1].symbole));

        joueurs[i].temps_total = 0;
        joueurs[i].nb_barrieres_restantes = MAX_BARRIERES / nb_joueurs; // Répartition équitable
    }
}

void initialiser_plateau(int nb_joueurs) {
    memset(plateau, ' ', sizeof(plateau));
    joueurs[0].x = 0; joueurs[0].y = TAILLE / 2;
    plateau[joueurs[0].x][joueurs[0].y] = joueurs[0].symbole;

    joueurs[1].x = TAILLE - 1; joueurs[1].y = TAILLE / 2;
    plateau[joueurs[1].x][joueurs[1].y] = joueurs[1].symbole;
}

void afficher_plateau() {
    system("cls");
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            printf("+---");
        }
        printf("+\n");
        for (int j = 0; j < TAILLE; j++) {
            printf("|");
            if (plateau[i][j] != ' ') {
                changer_couleur(11);
                printf(" %c ", plateau[i][j]);
                changer_couleur(15);
            } else {
                printf("   ");
            }
        }
        printf("|\n");
    }
    for (int j = 0; j < TAILLE; j++) {
        printf("+---");
    }
    printf("+\n");
}

bool deplacer_joueur(Joueur *joueur, char direction) {
    int new_x = joueur->x, new_y = joueur->y;
    switch (direction) {
        case 'h': new_x--; break;
        case 'b': new_x++; break;
        case 'g': new_y--; break;
        case 'd': new_y++; break;
        default: return false;
    }
    if (case_valide(new_x, new_y) && plateau[new_x][new_y] == ' ') {
        plateau[joueur->x][joueur->y] = ' ';
        joueur->x = new_x;
        joueur->y = new_y;
        plateau[joueur->x][joueur->y] = joueur->symbole;
        return true;
    }
    return false;
}

bool verifier_victoire(Joueur joueur) {
    return (joueur.x == TAILLE - 1 && joueur.symbole == joueurs[0].symbole) ||
           (joueur.x == 0 && joueur.symbole == joueurs[1].symbole);
}

bool poser_barriere(Joueur *joueur) {
    if (joueur->nb_barrieres_restantes <= 0) {
        printf("Vous n'avez plus de barrières.\n");
        return false;
    }

    int x, y;
    char orientation;
    printf("Entrez les coordonnées pour poser la barrière (x y) : ");
    scanf("%d %d", &x, &y);

    if (!case_valide(x, y)) {
        printf("Position invalide.\n");
        return false;
    }

    printf("Orientation (h pour horizontal, v pour vertical) : ");
    scanf(" %c", &orientation);

    if (orientation == 'h' && case_valide(x, y + 1) && plateau[x][y] == ' ' && plateau[x][y + 1] == ' ') {
        plateau[x][y] = '-';
        plateau[x][y + 1] = '-';
    } else if (orientation == 'v' && case_valide(x + 1, y) && plateau[x][y] == ' ' && plateau[x + 1][y] == ' ') {
        plateau[x][y] = '|';
        plateau[x + 1][y] = '|';
    } else {
        printf("Impossible de poser une barrière ici.\n");
        return false;
    }

    joueur->nb_barrieres_restantes--;
    return true;
}

void jouer_partie(int nb_joueurs) {
    initialiser_joueurs(nb_joueurs);
    initialiser_plateau(nb_joueurs);
    srand(time(NULL));
    int tour = rand() % nb_joueurs;

    while (1) {
        afficher_plateau();
        demarrer_chronometre(&joueurs[tour]);

        if (verifier_victoire(joueurs[tour])) {
            printf("\nLe joueur %s (%c) a gagné !\n", joueurs[tour].nom, joueurs[tour].symbole);
            break;
        }

        printf("\n%s (%c), voulez-vous poser une barrière ? (o/n) : ", joueurs[tour].nom, joueurs[tour].symbole);
        char choix;
        scanf(" %c", &choix);

        if (choix == 'o') {
            if (!poser_barriere(&joueurs[tour])) {
                continue;
            }
        } else {
            printf("Entrez une commande (h/b/g/d) : ");
            char commande;
            scanf(" %c", &commande);
            if (!deplacer_joueur(&joueurs[tour], commande)) {
                printf("Déplacement invalide !\n");
                continue;
            }
        }

        arreter_chronometre(&joueurs[tour]);
        tour = (tour + 1) % nb_joueurs;
    }

    for (int i = 0; i < nb_joueurs; i++) {
        afficher_temps(joueurs[i]);
    }
}

void afficher_regles() {
    system("cls");
    printf("=== Règles du jeu ===\n");
    printf("1. Chaque joueur commence avec un pion au bord opposé du plateau.\n");
    printf("2. Le but est d'atteindre le bord opposé.\n");
    printf("3. Vous pouvez poser des barrières pour bloquer votre adversaire.\n");
    printf("4. Chaque joueur a un nombre limité de barrières.\n");
    printf("Appuyez sur Entrée pour revenir au menu.\n");
    getchar();
    getchar();
}

void menu() {
    int choix;
    do {
        system("cls");
        printf("=== MENU ===\n");
        printf("1. Nouvelle Partie\n");
        printf("2. Règles\n");
        printf("3. Quitter\n");
        printf("Votre choix : ");
        scanf("%d", &choix);

        switch (choix) {
            case 1: jouer_partie(2); break;
            case 2: afficher_regles(); break;
            case 3: printf("Merci d'avoir joué !\n"); exit(0);
            default: printf("Choix invalide. Réessayez.\n");
        }
    } while (1);
}

int main() {
    menu();
    return 0;
}

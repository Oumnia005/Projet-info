#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <time.h>

// Dimensions du plateau
#define TAILLE 9

// Prototypes des fonctions
void menu();
void jouer_partie(int nb_joueurs);
void afficher_regles();
void afficher_scores();
void sauvegarder_partie();
void quitter_jeu();
void initialiser_plateau(int nb_joueurs);

// Plateau de jeu (barrières)
char plateau[TAILLE][TAILLE];
char barriers_h[TAILLE - 1][TAILLE]; // Barrières horizontales
char barriers_v[TAILLE][TAILLE - 1]; // Barrières verticales

// Positions des joueurs
typedef struct {
    int x, y;
    char symbole;
    char nom[20];
} Joueur;

Joueur joueurs[4]; // Jusqu'à 4 joueurs
int nb_joueurs = 2; // Par défaut : 2 joueurs

// Fonction pour vérifier si un symbole est unique
bool symbole_unique(char symbole, int index) {
    for (int i = 0; i < index; i++) {
        if (joueurs[i].symbole == symbole) {
            return false;
        }
    }
    return true;
}

// Initialisation des joueurs
void initialiser_joueurs(int nb_joueurs) {
    for (int i = 0; i < nb_joueurs; i++) {
        printf("Joueur %d, entrez votre nom : ", i + 1);
        scanf("%s", joueurs[i].nom);

        char symbole;
        do {
            printf("Joueur %s, choisissez un symbole unique pour votre pion : ", joueurs[i].nom);
            scanf(" %c", &symbole);

            if (!symbole_unique(symbole, i)) {
                printf("Ce symbole est déjà utilisé. Choisissez-en un autre.\n");
            } else {
                joueurs[i].symbole = symbole; // Affecte le symbole au joueur
            }
        } while (!symbole_unique(symbole, i));
    }
}


// Initialise le plateau
void initialiser_plateau(int nb_joueurs) {
    // Réinitialise le plateau
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            plateau[i][j] = ' ';
        }
    }

    // Initialise les positions des joueurs et place leurs symboles
    joueurs[0].x = 0;
    joueurs[0].y = TAILLE / 2;
    plateau[joueurs[0].x][joueurs[0].y] = joueurs[0].symbole;

    joueurs[1].x = TAILLE - 1;
    joueurs[1].y = TAILLE / 2;
    plateau[joueurs[1].x][joueurs[1].y] = joueurs[1].symbole;

    if (nb_joueurs == 4) {
        joueurs[2].x = TAILLE / 2;
        joueurs[2].y = 0;
        plateau[joueurs[2].x][joueurs[2].y] = joueurs[2].symbole;

        joueurs[3].x = TAILLE / 2;
        joueurs[3].y = TAILLE - 1;
        plateau[joueurs[3].x][joueurs[3].y] = joueurs[3].symbole;
    }
}


// Affiche le plateau
void afficher_plateau() {
    system("cls");
    printf("\n");

    // Affichage du plateau avec les barrières
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            printf("+---");
        }
        printf("+\n");

        for (int j = 0; j < TAILLE; j++) {
            printf("|");
            if (plateau[i][j] != ' ') {
                printf(" %c ", plateau[i][j]);
            } else {
                printf("   ");
            }
        }
        printf("|\n");
    }

    for (int j = 0; j < TAILLE; j++) {
        printf("+---");
    }
    printf("+\n");
}

// Vérifie si une case est valide (dans les limites du plateau)
bool case_valide(int x, int y) {
    return x >= 0 && x < TAILLE && y >= 0 && y < TAILLE;
}

// Déplace un joueur
bool deplacer_joueur(Joueur *joueur, char direction) {
    int new_x = joueur->x, new_y = joueur->y;

    switch (direction) {
        case 'h': new_x--; break; // Haut
        case 'b': new_x++; break; // Bas
        case 'g': new_y--; break; // Gauche
        case 'd': new_y++; break; // Droite
        default: return false;
    }

    if (case_valide(new_x, new_y) && plateau[new_x][new_y] == ' ') {
        plateau[joueur->x][joueur->y] = ' ';
        joueur->x = new_x;
        joueur->y = new_y;
        plateau[joueur->x][joueur->y] = joueur->symbole;
        return true;
    }

    return false;
}

// Vérifie si un joueur a gagné
bool verifier_victoire(Joueur joueur) {
    if (joueurs[0].x == TAILLE - 1) {
        return true;
    }
    if (joueurs[1].x == 0) {
        return true;
    }
    return false;
}

// Joue une partie
void jouer_partie(int nb_joueurs) {
    initialiser_joueurs(nb_joueurs);
    initialiser_plateau(nb_joueurs);
    // Initialisation du générateur aléatoire
    srand(time(NULL));

    // Sélection du joueur de départ
    int tour = rand() % nb_joueurs; // Numéro aléatoire entre 0 et nb_joueurs - 1

    while (1) {
        afficher_plateau();

        // Vérifie la victoire
        if (verifier_victoire(joueurs[tour])) {
            printf("\nLe joueur %s a remporte la partie !\n", joueurs[tour-1].nom);
            getchar();
            getchar();
            break;
        }

        printf("\n %s, Que vous voulez faire:\n ", joueurs[tour].nom);
        printf("1.Bouger mon pion\n");
        printf(" 2.Poser une barriere\n");
        printf(" 3.Passer mon tour\n");
        printf(" 4.Annuler le dernier tour\n");
        int choix;
        char commande;
        scanf(" %d", &choix);

        switch (choix) {
            case 1:
                printf("Quelle direction ?(h/b/g/d)");
                scanf(" %c", &commande);
                if (!deplacer_joueur(&joueurs[tour], commande)) {
                printf("Déplacement invalide !\n");
                continue;
                }
                tour = (tour + 1) % nb_joueurs; // Tour suivant
                break;
            case 2:
                printf("Pas encore codé");
                break;
            case 3:
                tour = (tour + 1) % nb_joueurs;
                break;
            case 4:
                printf("Pas encore codé");
                break;
            default:
                printf("Veuillez choisir un des numero proposes");
                break;
        }

    }
}

// Affiche les règles
void afficher_regles() {
    system("cls");
    printf("   ______________________________________________________________________         \n");
    printf("  |                                                                      |        \n");
    printf("  |                            |REGLES DU JEU|                           |        \n");
    printf("  |______________________________________________________________________|        \n");
    printf("  |                                                                      |        \n");
    printf("  |                            --BUT DU JEU--                            |        \n");
    printf("  |                                                                      |        \n");
    printf("  |             Deux modes de jeu possibles : 2 ou 4 joueurs.            |        \n");
    printf("  |  Etre le premier a atteindre la ligne opposee depuis sa ligne de     |        \n");
    printf("  |  depart.                                                             |        \n");
    printf("  |     Un tirage au sort de facon aleatoire determine qui commence.     |        \n");
    printf("  |    Les barrieres sont reparties equitablement entre les joueurs.     |        \n");
    printf("  |        Pour 2 joueurs : chaque joueur dispose de 10 barrieres        |        \n");
    printf("  |        Pour 4 joueurs : chaque joueur dispose de 5 barrieres         |        \n");
    printf("  |                                                                      |        \n");
    printf("  |                                                                      |        \n");
    printf("  |                           --DEPLACEMENTS--                           |        \n");
    printf("  |                                                                      |        \n");
    printf("  |                A tour de role chaque joueur choisi de :              |        \n");
    printf("  |  1) Deplacer son pion d'une case (Gauche/Droite/Devant/Derriere)     |        \n");
    printf("  |  2) Poser une de ses barrieres. Une barriere doit etre posee entre 2 |        \n");
    printf("  |   blocs de 2 cases. Lorsqu'il n'a plus de barrieres, un joueur est   |        \n");
    printf("  |                     oblige de deplacer son pion.                     |        \n");
    printf("  |  => Objectif : creer son propre chemin ou ralentir son adversaire    |        \n");
    printf("  |                                                                      |        \n");
    printf("  |                          --SPECIFICATIONS--                          |        \n");
    printf("  |                                                                      |        \n");
    printf("  |         /!\\  Interdiction de fermer totalement l'acces  /!\\          |      \n");
    printf("  |  Si 2 pions se retrouvent face a face le joueur a le droit de sauter |        \n");
    printf("  |                      par dessus sont adversaire.                     |        \n");
    printf("  |  Si une barriere se trouve derrière le pion saute, le joueur peut   |        \n");
    printf("  |       se deplacer sur le cote droit ou gauche du pion saute.         |        \n");
    printf("  |______________________________________________________________________|      \n\n");
    printf("APPUYEZ SUR ENTREE POUR RETOURNER AU MENU");
    getchar();
    getchar();
}

// Menu principal
void menu() {
    int choix;

    do {
        system("cls");
        printf("        _________________________________________         \n");
        printf("       |                 -MENU-                  |       \n");
        printf("       |_________________________________________|        \n");
        printf("       |   1. LANCER UNE NOUVELLE PARTIE         |       \n");
        printf("       |   2. VOIR LES REGLES                    |       \n");
        printf("       |   3. REPRENDRE UNE PARTIE SAUVEGARDEE   |       \n");
        printf("       |   4. SCORES                             |       \n");
        printf("       |   5. QUITTER                            |       \n");
        printf("       |_________________________________________|       \n");
        printf("Votre choix : ");
        scanf("%d", &choix);

        switch (choix) {
            case 1:
                printf("Nombre de joueurs (2 ou 4) : ");
                scanf("%d", &nb_joueurs);
                if (nb_joueurs != 2 && nb_joueurs != 4) {
                    printf("Nombre de joueurs invalide ! Retour au menu.\n");
                    break;
                }
                jouer_partie(nb_joueurs);
                break;
            case 2:
                afficher_regles();
                break;
            case 3:
                printf("Les scores seront bientôt disponibles !\n");
                getchar();
                break;
            case 4:
                printf("Sauvegarde indisponible pour l'instant.\n");
                getchar();
                break;
            case 5:
                printf("Merci d'avoir joué !\n");
                exit(0);
            default:
                printf("Choix invalide. Réessayez.\n");
        }
    } while (1);
}

int main() {
    menu();
    return 0;
}
